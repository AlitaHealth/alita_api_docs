openapi: 3.0.3
info:
  title: Alita Backend API
  description: Comprehensive API documentation for Alita backend services.
  version: '1.0'
  contact:
    name: Alita Health
    url: https://alitahealth.ai
servers:
- url: http://localhost:8000/api/v1
paths:
  /user/login/:
    post:
      summary: Login
      description: Authenticate a user and return tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: your_password
              required:
              - email
              - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
  /user/register/:
    post:
      summary: Register
      description: Register a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
                is_admin:
                  type: boolean
              required:
              - email
              - username
              - password
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                type: object
  /user/change-password/:
    put:
      summary: Change Password
      description: Change the password of the current user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                new_password:
                  type: string
              required:
              - old_password
              - new_password
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
  /user/logout/:
    post:
      summary: Logout
      description: Logs out the current user.
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
  /user/list/:
    get:
      summary: List Users
      description: List all users (admin only).
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /user/profile/{id}/:
    get:
      summary: User Profile
      description: Retrieve user profile by ID.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
  /rest/agent-data/{slug}/:
    get:
      summary: Get Agent Data
      description: Retrieve agent-specific data by slug.
      parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Agent data response
          content:
            application/json:
              schema:
                type: object
  /rest/organization/:
    get:
      summary: List Organizations
      responses:
        '200':
          description: Success
    post:
      summary: Create Organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Created
  /rest/organization/{uuid}/:
    get:
      summary: Get Organization
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
    put:
      summary: Update Organization
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Updated
  /rest/app-data/:
    get:
      summary: List All Apps
      responses:
        '200':
          description: Success
    post:
      summary: Create App
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: App Created
  /rest/app-data/{slug}/:
    get:
      summary: Get App
      parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
    put:
      summary: Update App
      parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Updated
  /rest/data-source/:
    get:
      summary: List Data Sources
      responses:
        '200':
          description: Success
    post:
      summary: Create Data Source
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Created
  /rest/data-source/{id}/:
    get:
      summary: Get Data Source
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
    put:
      summary: Update Data Source
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Updated
  /llm/chat-session/:
    get:
      summary: List Chat Sessions
      responses:
        '200':
          description: Success
    post:
      summary: Create Chat Session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Created
  /llm/chat-session/{slug}/:
    get:
      summary: Get Chat Session
      parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
    put:
      summary: Update Chat Session
      parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Updated
  /llm/chat-history/:
    get:
      summary: Chat History
      description: Fetch historical LLM chat data.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- BearerAuth: []
